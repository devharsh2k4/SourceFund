"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRequiredTransactionCount = getRequiredTransactionCount;
const create_2_factory_js_1 = require("../../contract/deployment/utils/create-2-factory.js");
const infra_js_1 = require("../../contract/deployment/utils/infra.js");
const infra_js_2 = require("../../contract/deployment/utils/infra.js");
const compute_published_contract_address_js_1 = require("../../utils/any-evm/compute-published-contract-address.js");
/**
 * @internal
 */
async function getRequiredTransactionCount(options) {
    const { chain, client, metadata, implementationConstructorParams, modules = [], } = options;
    if (metadata?.deployType === "autoFactory") {
        const results = await Promise.all([
            (0, create_2_factory_js_1.getDeployedCreate2Factory)({
                chain,
                client,
            }).then((c) => c ? null : { type: "infra", contractId: "Create2Factory" }),
            (0, infra_js_1.getDeployedInfraContract)({
                chain,
                client,
                contractId: "Forwarder",
            }).then((c) => c ? null : { type: "infra", contractId: "Forwarder" }),
            (0, infra_js_1.getDeployedInfraContract)({
                chain,
                client,
                contractId: "TWCloneFactory",
                constructorParams: {
                    _trustedForwarder: await (0, compute_published_contract_address_js_1.computePublishedContractAddress)({
                        chain,
                        client,
                        contractId: "Forwarder",
                    }),
                },
            }).then((c) => c ? null : { type: "infra", contractId: "TWCloneFactory" }),
            // TODO (deploy): add WETH contract check for implementations that need it (check implementation constructor params)
            (0, infra_js_1.getDeployedInfraContract)({
                chain,
                client,
                contractId: metadata.name,
                constructorParams: implementationConstructorParams,
                publisher: metadata.publisher,
                version: metadata.version,
            }).then((c) => c
                ? null
                : {
                    type: "implementation",
                    contractId: metadata.name,
                }),
            ...modules.map((m) => (0, infra_js_2.getDeployedInfraContractFromMetadata)({
                chain,
                client,
                contractMetadata: m,
            }).then((c) => c
                ? null
                : {
                    type: "module",
                    contractId: m.name,
                })),
        ]);
        results.push({ type: "proxy", contractId: metadata.name });
        return results.filter((r) => r !== null);
    }
    return [{ type: "implementation", contractId: metadata.name }];
}
//# sourceMappingURL=get-required-transactions.js.map